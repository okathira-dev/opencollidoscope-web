---
description: 基本となるコーディングルール
globs: 
alwaysApply: false
---

# 定義したコーディングルール

このリポジトリ内すべてのプロジェクトで基本となるコーディングルールを記載する。

## コロケーション原則

- 関連する機能は1つのディレクトリにまとめる
- 子コンポーネントは親コンポーネントのディレクトリ内に配置する
- atoms, consts, hooks, utilsは必要に応じてコンポーネントのディレクトリ内に配置する
  - これらは規模に応じてディレクトリでもファイルでも良い

## ディレクトリ構造

ディレクトリ構造を記載する。

### src以下

- `/features`: 各機能ディレクトリをおくディレクトリ
  - `/${機能名}`: 機能ディレクトリ
- `/components`: 汎用的・共通のuiコンポーネント
- `/atoms`: プロジェクト全体で共有する状態管理
- `/consts`: プロジェクト全体に関わるドメイン知識的な定数
- `/domain`: ドメインに関するロジック
- `/utils`: 機能に依存しない普遍的なユーティリティ関数
- App.tsx
- index.html
- main.tsx
- README.md

### 機能ディレクトリ

各機能ディレクトリには、必要に応じて以下のファイル・ディレクトリを配置する：

- `index.ts`
  - 再エクスポート用のファイル
  - 必要なものに限定して再エクスポート
  - コンポーネントは、メインコンポーネント（`${機能ディレクトリ名}.tsx`）のみをエクスポートする。

- `${機能ディレクトリ名}.tsx`
  - 機能ディレクトリのメインとなるコンポーネントの実装
  - ディレクトリ名と同じ名前を持つことが必須
  - 子コンポーネントの統合
  - UIロジック（ドメイン知識が関わらない処理）

- `${コンポーネント名}.tsx`
  - 子コンポーネントの実装
  - UIロジック（ドメイン知識が関わらない処理）
  
- `/atom`, `atom.ts`
  - 状態管理
  - アトムとその初期値の定義
  - 派生データの定義

- `/consts`, `consts.ts`
  - ドメイン知識的な定数の定義
  - コンポーネントで使用する定数の定義

- `/functions`, `functions.ts`
  - 機能に関連する関数
  - ドメインロジック（ドメイン知識が関わる処理）
  - 普遍的なユーティリティは機能ディレクトリではなく、プロジェクトディレクトリ直下の`/utils`に配置する。

- `/hooks`, `hooks.ts`
  - カスタムフックの実装

#### 子コンポーネント

- 機能を持たない子コンポーネントは、`${コンポーネント名}.tsx` として作成する。
- 機能を持つ子コンポーネントは、適宜更に子機能ディレクトリを作り配置する。

```
/${機能ディレクトリ名}
  /${子機能ディレクトリ名}
    /${子コンポーネントA}.tsx // 機能を持つ子コンポーネント
    index.ts                // 子機能ディレクトリのエクスポート
    ...
  ${機能ディレクトリ名}.tsx   // メインコンポーネント
  ${子コンポーネントB}.tsx    // 機能を持たない子コンポーネント
  index.ts  // コンポーネントはメインコンポーネントのみをエクスポート
```

## インポート方法

可能な限りdefault importを避け、named importの形をとる。

## 状態管理ルール

- atomそのものはエクスポートしない
- 必要に応じてカスタムフックを提供する
  - useAtomValueとuseSetAtomを使い、読み取り用と書き込み用とでフックを分けて作成する。
- 関心に合わせたディレクトリに配置する
- 状態管理ライブラリ(jotai)のインポートは状態管理のファイルでのみ行う
- 状態管理とコンポーネントとは必ずファイルを分ける
- コンポーネントファイルから直接状態管理ライブラリはインポートしない
